(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{580:function(e,a,t){e.exports=t.p+"assets/img/928028-20190421143022976-265942525.23adcebf.png"},654:function(e,a,t){"use strict";t.r(a);var r=t(21),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Eureka 是 Netflix 的一个子模块，也是核心模块之一，是SpringCloud的默认服务发现组件。")]),e._v(" "),r("p",[e._v("Eureka 是一个基于 REST（Representational State Transfer） 的服务，用于"),r("strong",[e._v("定位服务")]),e._v("，以实现云端中间层服务发现和故障转移。")]),e._v(" "),r("blockquote",[r("p",[e._v("类似DNS服务，只需要通过服务名就能访问到对应服务，不需要关注IP端口")])]),e._v(" "),r("p",[e._v("一方面给内部服务做服务发现（Eureka Server），另一方面可以结合ribbon组件提供各种个性化的负载均衡算法（Eureka Client）")]),e._v(" "),r("blockquote",[r("p",[e._v("Eureka属于客户端发现模式，客户端从一个服务注册服务中查询所有可用服务实例的库，并缓存到本地。客户端负责决定相应服务实例的网络位置，并且对请求实现负载均衡。\n与客户端模式相对的，还有基于服务端的负载均衡，比如代理服务器nginx、F5以及SpringCloud的网关zuul")])]),e._v(" "),r("h2",{attrs:{id:"基本架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本架构"}},[e._v("#")]),e._v(" 基本架构")]),e._v(" "),r("p",[e._v("集群部署的 Eureka 架构图")]),e._v(" "),r("p",[r("img",{attrs:{src:t(580),alt:""}})]),e._v(" "),r("ul",[r("li",[e._v("Eureka Server：Eureka 服务端，多个 Eureka Server 可构成集群，集群中各节点"),r("strong",[e._v("完全对等")]),e._v("。")]),e._v(" "),r("li",[e._v("Eureka Client：Eureka 客户端，业务服务依赖它实现服务注册和服务发现功能。\n"),r("ul",[r("li",[e._v("Application Service：服务提供者，依赖 Eureka Client 实现服务注册功能。")]),e._v(" "),r("li",[e._v("Application Client：服务消费者，依赖 Eureka Client 实现服务发现功能。")]),e._v(" "),r("li",[e._v("一个应用Application可以"),r("strong",[e._v("同时")]),e._v("是服务的"),r("strong",[e._v("提供者和消费者")])])])]),e._v(" "),r("li",[e._v("Register：Eureka Client 启动时会发起 Register 请求向 Eureka Server 注册自己。")]),e._v(" "),r("li",[e._v("Renew：Eureka Client 会周期性的向 Eureka Server 发送心跳来续约，默认30s。")]),e._v(" "),r("li",[e._v("Cancel：Eureka Client 关闭时会发送 Cancel 下线请求。")]),e._v(" "),r("li",[e._v("Get：Eureka Client 会周期性的发送 Get 请求，从 Eureka Server 拉取注册表信息缓存到本地，默认30s。")]),e._v(" "),r("li",[e._v("Make Remote Call：服务消费者对服务提供者进行远程调用（基于http）")]),e._v(" "),r("li",[e._v("Replicate：Eureka Server 之间通过 Replicate 实现"),r("strong",[e._v("数据同步")]),e._v("。当 Eureka Client  有请求（Heartbeat, Register, Cancel, StatusUpdate, DeleteStatusOverride）到某一个  Eureka Server 节点，该节点完成自身对应的操作后，会通过 Replicate 将本次请求同步到其他节点。")])]),e._v(" "),r("h3",{attrs:{id:"eureka-server-注册中心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eureka-server-注册中心"}},[e._v("#")]),e._v(" Eureka Server 注册中心")]),e._v(" "),r("p",[e._v("维护集群的服务信息。对Eureka客户端提供注册、同步和拉取服务；Eureka Server之间数据同步")]),e._v(" "),r("ul",[r("li",[r("h2",{attrs:{id:"服务注册服务提供者启动时-会通过-eureka-client-向-eureka-server-注册信息-eureka-server-会存储该服务的信息-eureka-server-内部有二层缓存机制来维护整个注册表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务注册服务提供者启动时-会通过-eureka-client-向-eureka-server-注册信息-eureka-server-会存储该服务的信息-eureka-server-内部有二层缓存机制来维护整个注册表"}},[e._v("#")]),e._v(" "),r("strong",[e._v("服务注册")]),e._v("\n服务提供者启动时，会通过 Eureka Client 向 Eureka Server 注册信息，Eureka Server 会存储该服务的信息，Eureka Server 内部有二层缓存机制来维护整个注册表")])]),e._v(" "),r("li",[r("strong",[e._v("提供获取最新注册表")]),e._v("\n服务消费者在调用服务时，如果 Eureka Client 没有缓存注册表的话，会从 Eureka Server 获取最新的注册表\n"),r("ul",[r("li",[e._v("REST API读取的是一级缓存readOnlyCache，默认30s从注册表（其实是二级缓存）更新一次注册信息\n"),r("ul",[r("li",[e._v("readOnlyCache更新间隔："),r("code",[e._v("eureka.server.response-cache-update-interval-ms=30000")]),e._v(" 默认"),r("strong",[e._v("30s")])])])])])]),e._v(" "),r("li",[r("strong",[e._v("同步状态")]),e._v("\nEureka Client 通过注册、心跳机制和 Eureka Server 同步当前客户端的状态。\n"),r("ul",[r("li",[e._v("心跳检查间隔：失去心跳多久判定为下线 默认3个心跳周期=90s\n"),r("ul",[r("li",[r("code",[e._v("eureka.instance.leaseExpirationDurationInSeconds")])])])])])])]),e._v(" "),r("h3",{attrs:{id:"eureka-client-客户端"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eureka-client-客户端"}},[e._v("#")]),e._v(" Eureka Client 客户端")]),e._v(" "),r("p",[e._v("封装与Eureka Server的交互，分为服务提供者和服务消费者两种角色")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("维护Eureka Server本服务的状态")]),e._v(" "),r("ul",[r("li",[e._v("微服务启动时，注册到Eureka Server服务注册表")]),e._v(" "),r("li",[e._v("微服务运行时，通过renew心跳告知Eureka Server自身的健康状况\n"),r("ul",[r("li",[e._v("心跳间隔："),r("code",[e._v("eureka.instance.lease-renewal-interval-in-seconds=30")])]),e._v(" "),r("li",[e._v("失效时间："),r("code",[e._v("eureka.instance.lease-expiration-duration-in-seconds=90")])])])]),e._v(" "),r("li",[e._v("微服务进程正常关闭时，发送cancel请求注销服务")])])]),e._v(" "),r("li",[r("p",[e._v("维护本地的服务注册表")]),e._v(" "),r("ul",[r("li",[e._v("微服务启动时，从Eureka Server拉取注册表缓存在本地\n"),r("ul",[r("li",[e._v("是否拉取："),r("code",[e._v("eureka.client.fetch-registry=true")])])])]),e._v(" "),r("li",[e._v("微服务运行时，定时从服务端获取注册表信息更新 默认"),r("strong",[e._v("30s")]),e._v(" "),r("ul",[r("li",[e._v("拉取间隔："),r("code",[e._v("eureka.client.registry-fetch-interval-seconds=30")])])])])])]),e._v(" "),r("li",[r("p",[e._v("根据注册表内容，对服务调用进行解析")]),e._v(" "),r("ul",[r("li",[e._v("将服务名解析成可以访问的ip端口")]),e._v(" "),r("li",[e._v("整合ribbon、feign等组件，共同完成远程服务调用\n"),r("ul",[r("li",[e._v("ribbon缓存刷新间隔默认为"),r("strong",[e._v("30s")]),e._v("："),r("code",[e._v("ribbon. ServerListRefreshInterval")])])])])])])]),e._v(" "),r("h2",{attrs:{id:"peer-to-peer-注册中心集群"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#peer-to-peer-注册中心集群"}},[e._v("#")]),e._v(" Peer-to-Peer 注册中心集群")]),e._v(" "),r("p",[e._v("每一个server是作为其他server的客户端存在。在一个server启动的时候，有一个synvUp操作，通过客户端请求其他的server节点中的"),r("strong",[e._v("一个节点")]),e._v("获取注册的应用实例信息，然后复制到其他的peer节点。")]),e._v(" "),r("blockquote",[r("h5",{attrs:{id:"主从复制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#主从复制"}},[e._v("#")]),e._v(" 主从复制")]),e._v(" "),r("p",[e._v("Master-Slave模式，一个主副本和多个从副本，所有数据的写操作都是提交到主副本，最后由主副本更新到其他的从副本（常采用异步更新），通常写是整个系统的瓶颈所在。")]),e._v(" "),r("h5",{attrs:{id:"对等复制-peer-to-peer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对等复制-peer-to-peer"}},[e._v("#")]),e._v(" 对等复制 Peer-to-Peer")]),e._v(" "),r("p",[e._v("副本之间不分主从，任何的副本都可以接受写数据，然后副本之间进行数据更新。在对等复制中，由于每一个副本都可以进行写操作，"),r("strong",[e._v("各个副本之间的数据同步及冲突处理")]),e._v("是一个比较难解决的问题。")]),e._v(" "),r("blockquote",[r("p",[e._v("eureka中采用"),r("strong",[e._v("版本号")]),e._v("（lastDirtyTimestamp）和心跳机制（renewLease重新租约方式）的方式来解决数据复制过程中的冲突问题")])])]),e._v(" "),r("h4",{attrs:{id:"集群同步配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#集群同步配置"}},[e._v("#")]),e._v(" 集群同步配置")]),e._v(" "),r("p",[e._v("Eureka Server开启Client功能")]),e._v(" "),r("ul",[r("li",[e._v("指向其他peer作为注册中心")]),e._v(" "),r("li",[e._v("将自己作为一个客户端向其他Server节点注册和拉取注册表信息")])]),e._v(" "),r("div",{staticClass:"language-yml line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-yml"}},[r("code",[r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("eureka")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("client")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 指定注册中心")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("serviceUrl")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("defaultZone")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" http"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//anohterpeer1"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("8761/eureka"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("http"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//anohterpeer2"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("8761/eureka\n    "),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 是否作为一个Eureka Client 注册到Eureka Server上去")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("register-with-eureka")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v(" \n    "),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 是否需要从Eureka Server上拉取注册信息到本地。")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("fetch-registry")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br")])]),r("h2",{attrs:{id:"服务发现选型对比"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务发现选型对比"}},[e._v("#")]),e._v(" 服务发现选型对比")]),e._v(" "),r("h3",{attrs:{id:"zookeeper-cp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-cp"}},[e._v("#")]),e._v(" ZooKeeper - CP")]),e._v(" "),r("blockquote",[r("p",[e._v("ZooKeeper集群采用"),r("strong",[e._v("Master-Slave架构")]),e._v("，当有Master节点不可用时，会在slave中（ZAB协议）选举出新的Master")])]),e._v(" "),r("p",[e._v("ZooKeeper保证数据"),r("strong",[e._v("强一致性")]),e._v("，当zk集群出现数据不一致（网络分区）时，会停止对外提供服务，直到集群中的节点数据达到统一")]),e._v(" "),r("blockquote",[r("p",[e._v("在注册中心的场景下，可用性的优先级要高于一致性")]),e._v(" "),r("p",[e._v("因为注册中心的集群挂了")])]),e._v(" "),r("h3",{attrs:{id:"eureka-server-ap"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eureka-server-ap"}},[e._v("#")]),e._v(" Eureka Server - AP")]),e._v(" "),r("blockquote",[r("p",[e._v("Eureka Server集群采用"),r("strong",[e._v("Peer-to-Peer")]),e._v("架构，每个节点的身份对等")])]),e._v(" "),r("p",[e._v("Eureka选择了A（高可用）也就必须放弃C（强一致），也就是说在eureka中采用最终一致性的方式来保证数据的一致性问题，节点中Eureka Server节点之间的状态是采用异步方式同步的，所以不保证节点间的状态一定是一致的，不过基本能保证最终状态是一致的。")]),e._v(" "),r("p",[e._v("因此实例的注册信息在集群的所有节点之间的数据都不是强一致性的")]),e._v(" "),r("blockquote",[r("p",[e._v("需要客户端能支持负载均衡算法、失败重试、异常回滚等容错机制，来保证服务整体的数据一致性（需要大量的额外开发工作）")])]),e._v(" "),r("h3",{attrs:{id:"nacos-ap-cp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nacos-ap-cp"}},[e._v("#")]),e._v(" Nacos - AP/CP")]),e._v(" "),r("p",[e._v("可以通过服务元数据设置来选择AP/CP模式（临时节点"),r("code",[e._v("ephemeral")]),e._v(" AP模式 Distro协议、持久化节点"),r("code",[e._v("persistent")]),e._v(" CP模式 Raft协议）")]),e._v(" "),r("p",[e._v("包含了Zookeeper和 Eureka的优点")]),e._v(" "),r("ul",[r("li",[e._v("服务端主动推送：服务列表变化时，可以通过nacos推送通知客户端，避免定时轮训带来的网络压力")]),e._v(" "),r("li",[e._v("友好的运维UI界面")]),e._v(" "),r("li",[e._v("更适合注册中心场景的AP集群策略")])]),e._v(" "),r("h3",{attrs:{id:"k8s-内部实现的域名解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#k8s-内部实现的域名解析"}},[e._v("#")]),e._v(" K8S - 内部实现的域名解析")]),e._v(" "),r("p",[e._v("由work节点上的kube-proxy实现Service层面的DNS域名解析和路由，而路由信息存储在master节点的etcd中。")]),e._v(" "),r("p",[e._v("etcd集群化存储，与zk一样，属于CP模型")]),e._v(" "),r("p",[e._v("个人认为K8S才是未来，会取代微服务的服务发现和负载均衡组件")]),e._v(" "),r("h2",{attrs:{id:"分区"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分区"}},[e._v("#")]),e._v(" 分区")]),e._v(" "),r("p",[e._v("为了适应部署在云环境（如阿里云或者aws的云主机）下跨境部署，而提出了Zone和region的概念，为服务添加所在节点的位置信息。微服务调用获取serviceURL时，找到网络状况最好的服务地址进行调用")]),e._v(" "),r("blockquote",[r("p",[e._v("服务消费者（Region 北京）会从服务注册信息中选择同机房的服务提供者（Region 北京），发起远程调用。只有同机房的服务提供者挂了才会选择其他机房的服务提供者（Region 青岛）")])]),e._v(" "),r("h3",{attrs:{id:"region"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#region"}},[e._v("#")]),e._v(" Region")]),e._v(" "),r("p",[e._v("使用region来代表一个独立的地理区域，比如us-east-1、us-east-2,、us-west-1等。在每一个region下面还分为多个AvailabilityZone，一个region对应多个AvailabilityZone，不同的region之间相互隔离。默认情况下面资源只是在单个region之间的AvailabilityZone之间进行复制，跨region之间不会进行资源的复制。")]),e._v(" "),r("h3",{attrs:{id:"availabilityzone"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#availabilityzone"}},[e._v("#")]),e._v(" AvailabilityZone")]),e._v(" "),r("p",[e._v("AvailabilityZone可以看成是region下面的一个一个机房，各个机房相对独立，主要是为了region的高可用考虑的，一个region下面的机房挂了，还有其他的机房可以使用。")]),e._v(" "),r("p",[e._v("一个AvailabilityZone下有多个Eureka server实例，他们之间构成peer节点集群，然后采用peer to peer的复制模式进行数据复制。")]),e._v(" "),r("h3",{attrs:{id:"获取注册中心服务地址-serviceurl"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#获取注册中心服务地址-serviceurl"}},[e._v("#")]),e._v(" 获取注册中心服务地址 ServiceUrl")]),e._v(" "),r("p",[e._v("Eureka Client的属性都在EurekaClientConfig类接口中定义处理方法，EurekaClientConfigBean实现类")]),e._v(" "),r("ul",[r("li",[e._v("获取当前应用的region，如果没有，默认为“us-east-1c”")]),e._v(" "),r("li",[e._v('使用region去获取配置中对应的availabilityZones，通过","分割')]),e._v(" "),r("li",[e._v("遍历availabilityZones集合，获取对应的ServiceUrl，判断服务是否可达")]),e._v(" "),r("li",[e._v("如果availabilityZones集合为空，或者没有可达的ServiceUrl，则返回defaultZone")])]),e._v(" "),r("h3",{attrs:{id:"分区配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分区配置"}},[e._v("#")]),e._v(" 分区配置")]),e._v(" "),r("p",[e._v("任何一个微服务，都会有下面的配置")]),e._v(" "),r("div",{staticClass:"language-yml line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-yml"}},[r("code",[r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("eureka")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("client")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("service-url")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("defaultZone")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" http"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//$"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("cmd.server"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("8761/eureka/\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br")])]),r("blockquote",[r("p",[e._v("service-url是一个map类型的配置，defaultZone作为map的一个键值对（不会将default-zone识别）")])]),e._v(" "),r("p",[e._v("同一个region下的所有服务 都使用相同的配置，可利用配置中心进行管理")]),e._v(" "),r("div",{staticClass:"language-yml line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-yml"}},[r("code",[r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("eureka")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" \n  "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("client")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("region")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" beijing\n    "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("availability-zones")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("beijing")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" zone"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("zone"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("service-url")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("zone-1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" http"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//zone1.cdn.com"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("1234/eureka"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("http"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//zone1.cdn.com"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("4321/eureka\n      "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("zone-2")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" http"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//zone2.cdn.com"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("1234/eureka"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("http"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//zone2.cdn.com"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("4321/eureka\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br")])]),r("h2",{attrs:{id:"自我保护机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自我保护机制"}},[e._v("#")]),e._v(" 自我保护机制")]),e._v(" "),r("p",[e._v("Eureka 自我保护机制是为了防止误杀服务而提供的一个机制。当个别客户端出现心跳失联时，则认为是客户端的问题，剔除掉客户端；")]),e._v(" "),r("p",[e._v("当 Eureka 捕获到大量的心跳失败时，则认为可能是"),r("strong",[e._v("自身网络问题")]),e._v("，进入自我保护机制；当客户端心跳恢复时，Eureka 会自动退出自我保护机制。")])])}),[],!1,null,null,null);a.default=s.exports}}]);