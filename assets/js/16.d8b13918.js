(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{534:function(t,a,s){t.exports=s.p+"assets/img/o_609956274533007378.5b7a3ed2.gif"},535:function(t,a,s){t.exports=s.p+"assets/img/image-20200515095036256.8540a8c2.png"},536:function(t,a,s){t.exports=s.p+"assets/img/image-20200515095210738.543ead7f.png"},537:function(t,a,s){t.exports=s.p+"assets/img/u=390929530,1299465342&fm=173&app=25&f=JPEG.93e8bb4c.jpg"},639:function(t,a,s){"use strict";s.r(a);var v=s(21),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"jvm执行引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm执行引擎"}},[t._v("#")]),t._v(" JVM执行引擎")]),t._v(" "),v("p",[t._v("JVM字节码由JVM执行引擎执行，执行引擎与操作系统的API交互，操作系统的硬件资源。")]),t._v(" "),v("p",[t._v("执行引擎根据"),v("code",[t._v("字节码指令")]),t._v("（每个字节码指令都由一个1字节的操作码和附加的操作数组成，称为optcode），进行下列四种操作：")]),t._v(" "),v("ul",[v("li",[t._v("栈操作指令：包括与局部变量表中数据交互的指令")]),t._v(" "),v("li",[t._v("程序流程控制 跳转")]),t._v(" "),v("li",[t._v("对象操作指令 各类方法调用\n"),v("ul",[v("li",[v("code",[t._v("invokestatic")]),t._v(" 调用静态方法")]),t._v(" "),v("li",[v("code",[t._v("invokespecial")]),t._v(" 用于调用构造方法")]),t._v(" "),v("li",[v("code",[t._v("invokeinterface")]),t._v(" 通过接口调用")]),t._v(" "),v("li",[v("code",[t._v("invokedynamic")]),t._v(" jdk7新增的指令 实现动态类型语言 lambda表达式的基础")])])]),t._v(" "),v("li",[t._v("基本数据类型的算术运算和类型转换")])]),t._v(" "),v("h2",{attrs:{id:"jvm方法执行过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm方法执行过程"}},[t._v("#")]),t._v(" JVM方法执行过程")]),t._v(" "),v("h3",{attrs:{id:"示例代码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#示例代码"}},[t._v("#")]),t._v(" 示例代码")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br")])]),v("h3",{attrs:{id:"执行过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行过程"}},[t._v("#")]),t._v(" 执行过程")]),t._v(" "),v("p",[t._v("执行引擎一行行执行字节码，对局部变量表和操作数栈中的"),v("strong",[t._v("Variable Slot")]),t._v(" 进行操作")]),t._v(" "),v("p",[v("img",{attrs:{src:s(534),alt:""}})]),t._v(" "),v("blockquote",[v("p",[t._v("求值栈即为常说的操作数栈")])]),t._v(" "),v("h3",{attrs:{id:"与线程的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#与线程的关系"}},[t._v("#")]),t._v(" 与线程的关系")]),t._v(" "),v("p",[t._v("一个线程对应着一个执行引擎，但一个执行引擎可以对应多个线程")]),t._v(" "),v("blockquote",[v("p",[t._v("我的理解")]),t._v(" "),v("p",[t._v("可以理解成执行引擎对应的是操作系统分配给JVM进程的CPU核数，是有限的。但JVM创建Java线程不受物理CPU核数的影响。")]),t._v(" "),v("p",[t._v("当线程数超过CPU核数时，执行引擎就会在不同的Java线程间切换，分配CPU的计算时间给各个线程")])]),t._v(" "),v("p",[t._v("线程的执行是执行引擎对线程私有内存数据结构（上下文）的操作")]),t._v(" "),v("ul",[v("li",[t._v("读取并执行程序计数器指向的字节码指令，执行完毕后将程序计数器\n"),v("ul",[v("li",[t._v("字节码的读取和执行是顺序的")]),t._v(" "),v("li",[t._v("操作程序计数器指针的目的是在对线程环境下，执行引擎切换线程时，"),v("strong",[t._v("保存线程执行到那一步")])])])]),t._v(" "),v("li",[t._v("方法调用栈顶端的栈桢：作为执行引擎执行当前方法的执行环境")])]),t._v(" "),v("h3",{attrs:{id:"java字节码与os系统调用指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java字节码与os系统调用指令"}},[t._v("#")]),t._v(" Java字节码与OS系统调用指令")]),t._v(" "),v("h4",{attrs:{id:"java字节码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java字节码"}},[t._v("#")]),t._v(" Java字节码")]),t._v(" "),v("p",[v("code",[t._v(".java")]),t._v("代码经过javac编译之后得到的"),v("code",[t._v(".class")]),t._v("文件")]),t._v(" "),v("p",[t._v("class文件中包含类的相关定义信息、常量以及方法的执行逻辑编译的字节码指令集")]),t._v(" "),v("p",[t._v("在jvm运行时，class文件会被加载到方法区")]),t._v(" "),v("p",[t._v("执行引擎执行的是当前方法中一条条字节码指令")]),t._v(" "),v("blockquote",[v("p",[t._v("扩展阅读："),v("RouterLink",{attrs:{to:"/2019/12/02/Java-JVM-class-bytecode/"}},[t._v("class字节码结构")]),t._v(" 、 "),v("RouterLink",{attrs:{to:"/static/Java字节码指令表/"}},[t._v("字节码指令表")])],1)]),t._v(" "),v("h4",{attrs:{id:"汇编码-机器指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#汇编码-机器指令"}},[t._v("#")]),t._v(" 汇编码（机器指令）")]),t._v(" "),v("p",[t._v("JVM执行引擎在执行字节码指令，会使用字节码解释器将字节码指令"),v("strong",[t._v("翻译")]),t._v("成宿主系统可以执行的系统调用指令")]),t._v(" "),v("p",[t._v("来调用系统的硬件资源，来实现计算和IO")]),t._v(" "),v("p",[t._v("这个执行引擎翻译的过程也是Java比C++/Golang执行效率低的原因")]),t._v(" "),v("blockquote",[v("p",[t._v("JDK1.2之前")]),t._v(" "),v("p",[v("img",{attrs:{src:s(535),alt:""}})]),t._v(" "),v("p",[t._v("JDK1.2之后")]),t._v(" "),v("p",[v("img",{attrs:{src:s(536),alt:""}})]),t._v(" "),v("p",[t._v("从JDK1.2开始，迫于Java运行始终比C++慢的压力，JVM的结构也慢慢发生了一些变化，JVM在某些场景下可以操作一定的硬件平台，一些核心的Java库甚至也可以操作底层的硬件平台")]),t._v(" "),v("p",[t._v("比如nio，零拷贝等特性")])]),t._v(" "),v("h3",{attrs:{id:"执行引擎组成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行引擎组成"}},[t._v("#")]),t._v(" 执行引擎组成")]),t._v(" "),v("p",[t._v("执行引擎由"),v("strong",[t._v("字节码解释器")]),t._v("，"),v("strong",[t._v("模板解释器")]),t._v("以及"),v("strong",[t._v("JIT即时编译器")]),t._v("组成")]),t._v(" "),v("p",[v("img",{attrs:{src:s(537),alt:""}})]),t._v(" "),v("h4",{attrs:{id:"字节码解释器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字节码解释器"}},[t._v("#")]),t._v(" 字节码解释器")]),t._v(" "),v("p",[t._v("JVM内部的"),v("strong",[t._v("一条一条")]),t._v("地读取、解释并且执行字节码指令。")]),t._v(" "),v("p",[t._v("它一条一条地解释和执行指令，所以它可以很快地解释字节码，但是执行起来会比较慢。")]),t._v(" "),v("p",[t._v("这是解释执行的语言的一个缺点。字节码这种“语言”基本来说是解释执行的。")]),t._v(" "),v("ul",[v("li",[t._v("程序启动时首先发挥作用，解释执行Class字节码")]),t._v(" "),v("li",[t._v("省去编译时间，"),v("strong",[t._v("加快启动速度")])]),t._v(" "),v("li",[t._v("但"),v("strong",[t._v("执行效率较低")])])]),t._v(" "),v("h5",{attrs:{id:"模板解释器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模板解释器"}},[t._v("#")]),t._v(" 模板解释器")]),t._v(" "),v("p",[v("code",[t._v("templateTable*")]),t._v("  +  "),v("code",[t._v("templateInterpreter*")])]),t._v(" "),v("p",[t._v("模板解释器是一堆"),v("strong",[t._v("本地码")]),t._v("的例程(routines 映射关系表)，它会在虚拟机创建的时候初始化好。")]),t._v(" "),v("p",[t._v("也就是说，模板解释器在初始化的时候会申请一片内存并设置为可读可写可执行，然后向那片内存写入本地码。在解释执行字节码指令时，会查找映射关系表找到对应的机器码片段，然后执行那片内存里面的二进制代码")]),t._v(" "),v("h5",{attrs:{id:"c-解释器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#c-解释器"}},[t._v("#")]),t._v(" C++解释器")]),t._v(" "),v("p",[v("code",[t._v("bytecodeInterpreter*")]),t._v(" + "),v("code",[t._v("cppInterpreter*")])]),t._v(" "),v("p",[t._v("原理上使用"),v("strong",[t._v("c++代码模拟Java字节码指令")]),t._v("的执行")]),t._v(" "),v("h4",{attrs:{id:"jit即时编译器-just-in-time-compiler"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jit即时编译器-just-in-time-compiler"}},[t._v("#")]),t._v(" JIT即时编译器 - Just In Time Compiler")]),t._v(" "),v("blockquote",[v("p",[t._v("即时编译器被引入用来弥补解释器执行效率低的缺点。")])]),t._v(" "),v("p",[t._v("执行引擎首先按照解释执行的方式来执行，然后在合适的时候，即时编译器把整段字节码编译成本地代码。然后，执行引擎就没有必要再去解释执行方法了，它可以直接通过本地代码去执行它。")]),t._v(" "),v("blockquote",[v("p",[t._v("执行本地代码比一条一条进行解释执行的速度快很多。编译后的代码可以执行的很快，因为本地代码是保存在缓存里的。")])]),t._v(" "),v("ul",[v("li",[t._v("程序解释运行后，JIT编译器逐渐发挥作用")]),t._v(" "),v("li",[t._v("编译成本地代码，提高执行效率")]),t._v(" "),v("li",[t._v("但占用程序运行时间、内存等资源")])]),t._v(" "),v("p",[t._v("但是即时编译的成本也很高，JVM会判断"),v("strong",[t._v("热点代码")]),t._v("进行JIT")]),t._v(" "),v("p",[t._v("参考")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.cnblogs.com/royi123/p/3569511.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("字节码执行引擎"),v("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=_.exports}}]);