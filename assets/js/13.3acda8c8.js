(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{550:function(a,v,t){a.exports=t.p+"assets/img/image-20200513222008258.8d4b8475.png"},551:function(a,v,t){a.exports=t.p+"assets/img/908514-20160728195713028-1922699910.87656b9a.jpg"},552:function(a,v,t){a.exports=t.p+"assets/img/1102349-20170802150423536-1070223975.385251e1.png"},553:function(a,v,t){a.exports=t.p+"assets/img/592743-20160321201532464-1956190499.d352ce46.png"},554:function(a,v,t){a.exports=t.p+"assets/img/image-20200515133439210.3699fd9b.png"},643:function(a,v,t){"use strict";t.r(v);var _=t(21),r=Object(_.a)({},(function(){var a=this,v=a.$createElement,_=a._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"jvm整体概览"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm整体概览"}},[a._v("#")]),a._v(" JVM整体概览")]),a._v(" "),_("p",[_("img",{attrs:{src:t(550),alt:""}})]),a._v(" "),_("h1",{attrs:{id:"jvm数据区域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm数据区域"}},[a._v("#")]),a._v(" JVM数据区域")]),a._v(" "),_("blockquote",[_("p",[a._v("JVM内存模型区别于Java内存模型JMM")])]),a._v(" "),_("p",[a._v("JVM"),_("strong",[a._v("运行时")]),a._v("数据区域划分")]),a._v(" "),_("ul",[_("li",[a._v("线程共享\n"),_("ul",[_("li",[_("p",[a._v("堆")])]),a._v(" "),_("li",[_("p",[a._v("Java 8之前 永久带")]),a._v(" "),_("ul",[_("li",[a._v("常量池")]),a._v(" "),_("li",[a._v("类信息")])])]),a._v(" "),_("li",[_("p",[a._v("java 8之后 方法区 matespace")]),a._v(" "),_("p",[a._v("只存放类信息，常量池被移到堆内存")])]),a._v(" "),_("li",[_("p",[a._v("Code Cache")]),a._v(" "),_("p",[a._v("存放JIT即时编译器编译后的本地机器代码（直接执行、不需要解释执行）")])])])]),a._v(" "),_("li",[a._v("线程独占\n"),_("ul",[_("li",[a._v("虚拟机栈")]),a._v(" "),_("li",[a._v("本地方法栈")]),a._v(" "),_("li",[a._v("程序计数器")])])])]),a._v(" "),_("h2",{attrs:{id:"线程共享"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程共享"}},[a._v("#")]),a._v(" 线程共享")]),a._v(" "),_("h3",{attrs:{id:"方法区-method-area"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法区-method-area"}},[a._v("#")]),a._v(" 方法区 Method Area")]),a._v(" "),_("p",[a._v("方法区属于线程共享的内存区域，又称Non-Heap（非堆），主要用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据")]),a._v(" "),_("blockquote",[_("h4",{attrs:{id:"永久代-permgem"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#永久代-permgem"}},[a._v("#")]),a._v(" 永久代 PermGem")]),a._v(" "),_("p",[a._v("java8之前方法区称为永久代，Java8之后被废除，替换为Metaspace(本地内存中)")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("PermGem有大小限制，当JVM中动态代理生成太多class对象，就会抛出"),_("code",[a._v("java.lang.OutOfMemoryError:PermGenspace")])])]),a._v(" "),_("li",[_("p",[a._v("Metaspace不在JVM中，不受JVM的内存大小限制")])])])]),a._v(" "),_("h4",{attrs:{id:"运行时常量池-run-time-constant-pool"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池-run-time-constant-pool"}},[a._v("#")]),a._v(" 运行时常量池（Run-Time Constant Pool）")]),a._v(" "),_("p",[a._v("方法区的一部分。Java的常量池可以存放各种常量信息，不管是编译期生成的各种字面量，还是需要在运行时决定的符号引用，所以它比一般语言的符号表存储的信息更加宽泛。\n程序运行期间，静态存储的数据将随时等候调用。可用"),_("code",[a._v("static关键字")]),a._v("指出一个对象的特定元素是静态的。但Java对象本身永远都不会置入静态存储空间。")]),a._v(" "),_("h3",{attrs:{id:"堆-heap"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#堆-heap"}},[a._v("#")]),a._v(" 堆 Heap")]),a._v(" "),_("p",[_("img",{attrs:{src:t(551),alt:""}})]),a._v(" "),_("p",[a._v("Java内存管理的核心区域，用来放置Java对象实例，几乎所有创建的Java对象实例都是被直接分配在堆上。堆被"),_("strong",[a._v("所有的线程共享")])]),a._v(" "),_("h4",{attrs:{id:"新生代-newgen"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#新生代-newgen"}},[a._v("#")]),a._v(" 新生代 NewGen")]),a._v(" "),_("p",[a._v("年轻代又分为Eden和Survivor区。Survivor区由FromSpace和ToSpace组成。Eden区占大容量，Survivor两个区占小容量，默认比例是8:1:1")]),a._v(" "),_("h5",{attrs:{id:"eden-伊甸园"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#eden-伊甸园"}},[a._v("#")]),a._v(" Eden 伊甸园")]),a._v(" "),_("p",[a._v("绝大多数新建的对象都“出生在”Eden ，占用内存很大的对象，会被直接在老年代创建")]),a._v(" "),_("blockquote",[_("p",[a._v("代码的写法会决定对象的声明周期，要根据不同的场景选择")]),a._v(" "),_("ul",[_("li",[a._v("在方法中new出来的对象，当方法执行完毕之后，就会失去引用，被垃圾回收")]),a._v(" "),_("li",[a._v("被定义为类的静态变量，其引用一直存在方法区的常量池中，不会被垃圾回收，经过几次GC后进入老年代")])])]),a._v(" "),_("h5",{attrs:{id:"survivor-幸存者"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#survivor-幸存者"}},[a._v("#")]),a._v(" Survivor 幸存者")]),a._v(" "),_("p",[a._v("分为两个大小相同的区域，称为FromSpace和ToSpace。用来放置Minor GC复制-清除算法存活下来的对象")]),a._v(" "),_("blockquote",[_("p",[a._v("用于复制-清除算法，为了解决碎片化。")])]),a._v(" "),_("h4",{attrs:{id:"老年代-oldgen"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#老年代-oldgen"}},[a._v("#")]),a._v(" 老年代 OldGen")]),a._v(" "),_("p",[a._v("放置长生命周期的对象，通常都是从Survivor区域拷贝过来的对象（Survivor区存活了多次Minor GC）；也可能是占用内存很大的对象，在创建的时候被直接放到老年代；")]),a._v(" "),_("blockquote",[_("p",[a._v("被Spring容器管理的Bean都会在老年代中")])]),a._v(" "),_("h4",{attrs:{id:"相关启动参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#相关启动参数"}},[a._v("#")]),a._v(" 相关启动参数")]),a._v(" "),_("blockquote",[_("ul",[_("li",[_("code",[a._v("-Xmx value")]),a._v(" 最大堆体积")]),a._v(" "),_("li",[_("code",[a._v("-Xms value")]),a._v(" 初始的最小堆体积")]),a._v(" "),_("li",[_("code",[a._v("-XX:NewRatio=value")]),a._v(" 老年代和新生代的比例\n默认情况下，这个数值是3，意味着老年代是新生代的3倍大；换句话说，新生代是堆大小的1/4。")]),a._v(" "),_("li",[_("code",[a._v("-XX:NewSize=value")]),a._v(" 新生代大小\n可以不用比例的方式调整新生代的大小，直接指定下面的参数，设定具体的内存大小数值")]),a._v(" "),_("li",[_("code",[a._v("-XX:SurvivorRatio=value")]),a._v("\nEden和Survivor的大小是按照比例设置的，如果SurvivorRatio是8，那么Survivor区域就是Eden的1/8大小，也就是新生代的1/10，因为YoungGen=Eden + 2*Survivor")])])]),a._v(" "),_("h4",{attrs:{id:"对象数据结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对象数据结构"}},[a._v("#")]),a._v(" 对象数据结构")]),a._v(" "),_("p",[_("img",{attrs:{src:t(552),alt:""}})]),a._v(" "),_("h5",{attrs:{id:"对象头-header"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对象头-header"}},[a._v("#")]),a._v(" 对象头（Header）")]),a._v(" "),_("p",[a._v("存放一个对象的元数据，例如：对应的类、HashCode、GC分代年龄计数、锁状态标志")]),a._v(" "),_("ul",[_("li",[a._v("markword 用来存储对象的运行时状态数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等")]),a._v(" "),_("li",[a._v("klass 类指针 确定该对象是属于哪个对象")]),a._v(" "),_("li",[a._v("length 如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的字段")])]),a._v(" "),_("h5",{attrs:{id:"实例数据-instance-data"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实例数据-instance-data"}},[a._v("#")]),a._v(" 实例数据 （Instance Data）")]),a._v(" "),_("p",[a._v("对象真正存储的有效信息，也是程序代码中所定义的各种类型的字段内容。无论是从父类继承下来的，还是在子类中定义的，都需要记录下来。这部分的存储顺序会受到虚拟机分配策略参数（FieldAllocationStyle）和字段在Java源码中定义顺序的影响")]),a._v(" "),_("h5",{attrs:{id:"对齐填充-padding"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对齐填充-padding"}},[a._v("#")]),a._v(" 对齐填充（Padding）")]),a._v(" "),_("p",[a._v("起到占位符的作用")]),a._v(" "),_("blockquote",[_("p",[a._v("HotSpot VM 中规定对象起始地址必须是8字节的整数倍，即每个对象的大小必须是8字节的整数倍")]),a._v(" "),_("p",[a._v("对象头部分正好是8字节的倍数（1倍或者2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全")])]),a._v(" "),_("h2",{attrs:{id:"线程私有内存区域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程私有内存区域"}},[a._v("#")]),a._v(" 线程私有内存区域")]),a._v(" "),_("p",[a._v("每启动一个"),_("strong",[a._v("线程")]),a._v("都会给线程分配一块内存区域来存储程序计数器和方法调用栈")]),a._v(" "),_("h3",{attrs:{id:"程序计数器-pc-program-counter-register"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器-pc-program-counter-register"}},[a._v("#")]),a._v(" 程序计数器（PC，Program Counter Register）")]),a._v(" "),_("p",[a._v("指向线程当前方法"),_("strong",[a._v("正在执行")]),a._v("的"),_("strong",[a._v("字节码指令")]),a._v("(存放在Class对象的方法属性中)")]),a._v(" "),_("blockquote",[_("p",[a._v("每个线程都有它自己的程序计数器，并且任何时间一个线程都只有一个方法在执行，也就是所谓的"),_("strong",[a._v("当前方法")])]),a._v(" "),_("p",[a._v("程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果是在执行native方法，则是未指定值（undefined）")])]),a._v(" "),_("h4",{attrs:{id:"作用-多线程cpu上下文切换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#作用-多线程cpu上下文切换"}},[a._v("#")]),a._v(" 作用 - 多线程CPU上下文切换")]),a._v(" "),_("p",[a._v("线程是一个抽象概念，CPU的计算资源会在多个线程间切换，当线程让出计算资源时，线程会进入挂起状态；当线程再次获得计算资源，线程会读取程序计数器指向的JVM指令继续执行")]),a._v(" "),_("p",[a._v("当CPU资源在多个线程间换时，程序计数器和虚拟机栈用来"),_("strong",[a._v("保存线程执行的上下文")])]),a._v(" "),_("blockquote",[_("p",[a._v("JAVA代码编译后的字节码在未经过JIT（实时编译器）编译前，其执行方式是通过“字节码解释器”进行解释执行。简单的工作原理为解释器读取装载入内存的字节码，按照顺序读取字节码指令。读取一个指令后，将该指令“翻译”成固定的操作，并根据这些操作进行分支、循环、跳转等流程。")]),a._v(" "),_("p",[a._v("从上面的描述中，可能会产生程序计数器是否是多余的疑问。因为沿着指令的顺序执行下去，即使是分支跳转这样的流程，跳转到指定的指令处按顺序继续执行是完全能够保证程序的执行顺序的。假设程序永远只有一个线程，这个疑问没有任何问题，也就是说并不需要程序计数器。但实际上程序是通过多个线程协同合作执行的。")]),a._v(" "),_("p",[a._v("首先我们要搞清楚JVM的多线程实现方式。JVM的多线程是通过CPU时间片轮转（即线程轮流切换并分配处理器执行时间）算法来实现的。也就是说，某个线程在执行过程中可能会因为时间片耗尽而被挂起，而另一个线程获取到时间片开始执行。当被挂起的线程重新获取到时间片的时候，它要想从被挂起的地方继续执行，就必须知道它上次执行到哪个位置，在JVM中，通过程序计数器来记录某个线程的字节码执行位置。因此，程序计数器是具备线程隔离的特性，也就是说，每个线程工作时都有属于自己的独立计数器。")])]),a._v(" "),_("h3",{attrs:{id:"java虚拟机栈-java-virtual-machine-stack"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java虚拟机栈-java-virtual-machine-stack"}},[a._v("#")]),a._v(" Java虚拟机栈（Java Virtual Machine Stack）")]),a._v(" "),_("p",[a._v("又称为方法调用栈，每个线程维护一个虚拟机栈，内部维护的栈桢（Stack Frame）。")]),a._v(" "),_("p",[a._v("利用栈数据结构"),_("strong",[a._v("先进后出")]),a._v("的特点，记录了这个线程的方法调用过程")]),a._v(" "),_("ul",[_("li",[a._v("方法调用，则创建一个栈桢压入方法调用栈；")]),a._v(" "),_("li",[a._v("方法退出，则将栈桢出栈。")])]),a._v(" "),_("p",[a._v("这个方法调用栈用来表征线程的"),_("strong",[a._v("方法调用链")]),a._v("，调用链上每一个方法从调用到方法返回都对应着一个栈帧入栈出栈的过程。")]),a._v(" "),_("h4",{attrs:{id:"栈帧-stack-frame"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#栈帧-stack-frame"}},[a._v("#")]),a._v(" 栈帧（Stack Frame）")]),a._v(" "),_("p",[a._v("栈帧（Stack Frame）是用来保存方法执行需要"),_("strong",[a._v("上下文")]),a._v("的数据结构（局部变量表、操作数栈）")]),a._v(" "),_("p",[_("strong",[a._v("当前线程")]),a._v("执行字节码指令实现诸如：逻辑判断、数学运算、对堆中对象的读写（当不同的线程对堆中同一个对象进行操作时，存在并发问题，通过"),_("RouterLink",{attrs:{to:"/views/java/2019/120401.html"}},[a._v("JMM")]),a._v("规范来控制）")],1),a._v(" "),_("h5",{attrs:{id:"当前栈桢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#当前栈桢"}},[a._v("#")]),a._v(" 当前栈桢")]),a._v(" "),_("p",[a._v("在活动线程中，只有"),_("strong",[a._v("栈顶的栈帧")]),a._v("才是有效的，称为当前栈帧。")]),a._v(" "),_("p",[a._v("这个栈帧所关联的方法称为"),_("strong",[a._v("当前方法")]),a._v("，执行引擎所运行的所有的字节码指令都只针对当前栈帧进行操作。")]),a._v(" "),_("p",[a._v("虚拟机栈中其他的栈桢对应的方法都处于执行状态，"),_("strong",[a._v("等待")]),a._v("上方栈桢对应的方法执行返回。")]),a._v(" "),_("blockquote",[_("p",[a._v("我的理解")]),a._v(" "),_("ul",[_("li",[a._v("这里的方法调用指的是JVM字节码指令"),_("code",[a._v("invoke****")])]),a._v(" "),_("li",[a._v("java主线程的方法调用栈的"),_("strong",[a._v("最底部")]),a._v("为java入口函数（main方法）；子线程的方法调用栈的最底部为run方法")]),a._v(" "),_("li",[a._v("虚拟机栈顶端的栈桢是线程当期正在执行的方法的上下文")])])]),a._v(" "),_("h4",{attrs:{id:"栈帧内部结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#栈帧内部结构"}},[a._v("#")]),a._v(" 栈帧内部结构")]),a._v(" "),_("p",[_("img",{attrs:{src:t(553),alt:""}})]),a._v(" "),_("h5",{attrs:{id:"局部变量表-local-variable-table"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#局部变量表-local-variable-table"}},[a._v("#")]),a._v(" 局部变量表 Local Variable Table")]),a._v(" "),_("p",[a._v("存放方法参数列表和方法内部定义的局部变量")]),a._v(" "),_("ul",[_("li",[a._v("为一组变量值存储空间，用于存放方法参数和方法内定义的局部变量。")]),a._v(" "),_("li",[a._v("最小单位变量槽（"),_("strong",[a._v("Variable Slot")]),a._v("）8种数据类型\n"),_("ul",[_("li",[a._v("boolean")]),a._v(" "),_("li",[a._v("byte")]),a._v(" "),_("li",[a._v("char")]),a._v(" "),_("li",[a._v("short")]),a._v(" "),_("li",[a._v("int")]),a._v(" "),_("li",[a._v("float")]),a._v(" "),_("li",[_("strong",[a._v("reference")])]),a._v(" "),_("li",[a._v("returnAddress")])])])]),a._v(" "),_("h5",{attrs:{id:"操作数栈-operand-stack"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作数栈-operand-stack"}},[a._v("#")]),a._v(" 操作数栈 Operand Stack")]),a._v(" "),_("p",[a._v("数据结构为后入先出LIFO结构")]),a._v(" "),_("p",[a._v("方法执行过程中，会有各种字节码指令往操作栈中写入和提取内容，即入栈、出栈操作。")]),a._v(" "),_("blockquote",[_("p",[a._v("可以理解成"),_("strong",[a._v("执行引擎的”草稿纸“")])])]),a._v(" "),_("h5",{attrs:{id:"动态连接-dynamic-linking"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动态连接-dynamic-linking"}},[a._v("#")]),a._v(" 动态连接 Dynamic Linking")]),a._v(" "),_("p",[a._v("一个指向运行时常量池中该栈帧所属方法的指针，支持方法调用过程的动态链接。")]),a._v(" "),_("h5",{attrs:{id:"返回地址"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#返回地址"}},[a._v("#")]),a._v(" 返回地址")]),a._v(" "),_("p",[a._v("退出当前方法执行有两种方式")]),a._v(" "),_("ul",[_("li",[_("p",[_("strong",[a._v("正常返回")])]),a._v(" "),_("p",[a._v("执行引擎遇到任意一个方法返回的字节码指令")]),a._v(" "),_("p",[a._v("返回值传递给上层的方法调用者（"),_("strong",[a._v("将返回值压入到调用者栈桢的操作数栈中")]),a._v("）")])]),a._v(" "),_("li",[_("p",[_("strong",[a._v("异常返回")])]),a._v(" "),_("p",[a._v("程序执行遇到异常，并且没有try catch处理")]),a._v(" "),_("p",[a._v("这种情况下不会给上层调用者返回值")])])]),a._v(" "),_("p",[a._v("退出当前方法后，返回值传递给上层的方法调用者并且将")]),a._v(" "),_("h3",{attrs:{id:"本地方法栈-native-method-stack"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈-native-method-stack"}},[a._v("#")]),a._v(" 本地方法栈（Native Method Stack）")]),a._v(" "),_("p",[a._v("本地方法栈属于线程私有的数据区域，这部分主要"),_("strong",[a._v("与虚拟机用到的 Native 方法相关")]),a._v("，一般情况下，我们无需关心此区域。")]),a._v(" "),_("p",[_("img",{attrs:{src:t(554),alt:""}})])])}),[],!1,null,null,null);v.default=r.exports}}]);