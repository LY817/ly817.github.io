(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{656:function(t,a,s){"use strict";s.r(a);var v=s(21),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("事务是"),s("strong",[t._v("一组")]),t._v("数据操作的集合，是一组程序的执行单元")]),t._v(" "),s("h1",{attrs:{id:"事务特性-acid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务特性-acid"}},[t._v("#")]),t._v(" 事务特性 ACID")]),t._v(" "),s("p",[t._v("事务本身不包含这4个特性，我们需要通过某些手段，尽量的让执行单元满足这四个特性")]),t._v(" "),s("h2",{attrs:{id:"原子性-atomic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子性-atomic"}},[t._v("#")]),t._v(" 原子性 - Atomic")]),t._v(" "),s("p",[t._v("事务必须是原子工作单元；对于其数据修改，要么全都执行，要么全都不执行")]),t._v(" "),s("blockquote",[s("p",[t._v("通常，与某个事务关联的操作具有共同的目标，并且是相互依赖的。如果系统只执行这些操作的一个子集，则可能会破坏事务的总体目标。原子性消除了系统处理操作子集的可能性")])]),t._v(" "),s("h2",{attrs:{id:"一致性-consistency"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一致性-consistency"}},[t._v("#")]),t._v(" 一致性 - Consistency")]),t._v(" "),s("p",[t._v("事务可以"),s("strong",[t._v("封装状态改变")]),t._v(",事务必须始终保持"),s("strong",[t._v("系统")]),t._v("处于一致的状态，不能破坏关系数据的完整性以及"),s("strong",[t._v("业务逻辑")]),t._v("上的一致性。")]),t._v(" "),s("p",[t._v("在一个事务执行之"),s("strong",[t._v("前")]),t._v("和执行之"),s("strong",[t._v("后")]),t._v("数据库都必须处于一致性状态。这种特性称为事务的一致性")]),t._v(" "),s("blockquote",[s("p",[t._v("比如 转账业务 扣款账户减少的金额和到款账户增加的金额必须一致")])]),t._v(" "),s("h2",{attrs:{id:"隔离性-isolation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隔离性-isolation"}},[t._v("#")]),t._v(" 隔离性 - Isolation")]),t._v(" "),s("p",[t._v("在"),s("strong",[t._v("并发")]),t._v("环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自完整的数据空间")]),t._v(" "),s("p",[t._v("事务是并发控制机制，他们交错使用时也能提供一致性。隔离让我们隐藏来自外部世界未提交的状态变化，一个失败的事务不应该破坏系统的状态。隔离是通过用悲观或乐观锁机制实现的。")]),t._v(" "),s("h2",{attrs:{id:"持久性-durability"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#持久性-durability"}},[t._v("#")]),t._v(" 持久性 - Durability")]),t._v(" "),s("p",[t._v("事务结束后，事务处理的结果必须能够得到固化，即写入数据库文件中即使机器宕机数据也不会丢失，它对于系统的影响是永久性的")]),t._v(" "),s("blockquote",[s("p",[t._v("事务机制的实现处于"),s("strong",[t._v("存储引擎磁盘数据操作之前")]),t._v("。所有已提交的事务都会被"),s("strong",[t._v("持久化到事务日志")]),t._v("中")]),t._v(" "),s("p",[t._v("对于已提交但未通过存储引擎写入磁盘的事务，就算MySQL服务宕机重启，已提交事务的修改依然会被持久化到磁盘")])]),t._v(" "),s("h1",{attrs:{id:"隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隔离级别"}},[t._v("#")]),t._v(" 隔离级别")]),t._v(" "),s("p",[t._v("隔离级别的引入是为了"),s("strong",[t._v("解决并发场景下的数据异常")])]),t._v(" "),s("p",[t._v("数据的隔离性和并发性能存在"),s("strong",[t._v("矛盾")]),t._v("，隔离性越高意味着并发性能越低。所以隔离级别的选择需要根据业务场景权衡")]),t._v(" "),s("h2",{attrs:{id:"数据异常类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据异常类型"}},[t._v("#")]),t._v(" 数据异常类型")]),t._v(" "),s("h3",{attrs:{id:"更新丢失"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新丢失"}},[t._v("#")]),t._v(" 更新丢失")]),t._v(" "),s("h4",{attrs:{id:"第一类丢失更新-update-lost"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一类丢失更新-update-lost"}},[t._v("#")]),t._v(" 第一类丢失更新（Update Lost）")]),t._v(" "),s("p",[t._v("此种更新丢失是因为回滚的原因，所以也叫"),s("strong",[t._v("回滚丢失")])]),t._v(" "),s("blockquote",[s("p",[t._v("此时两个事务同时更新count，两个事务都读取到100，事务一更新成功并提交，count=100+1=101，事务二出于某种原因更新失败了，然后回滚，事务二就把count还原为它一开始读到的100，此时事务一的更新就这样丢失了")])]),t._v(" "),s("h4",{attrs:{id:"第二类丢失更新-second-update-lost"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二类丢失更新-second-update-lost"}},[t._v("#")]),t._v(" 第二类丢失更新（Second Update Lost）")]),t._v(" "),s("p",[t._v("此种更新丢失是因为更新被其他事务给覆盖了，也可以叫"),s("strong",[t._v("覆盖丢失")])]),t._v(" "),s("blockquote",[s("p",[t._v("两个事务同时更新count，都读取100这个初始值，事务一先更新成功并提交，count=100+1=101，事务二后更新成功并提交，count=100+1=101,由于事务二count还是从100开始增加，事务一的更新就这样丢失了")])]),t._v(" "),s("h3",{attrs:{id:"脏读-dirty-read"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#脏读-dirty-read"}},[t._v("#")]),t._v(" 脏读（Dirty Read）")]),t._v(" "),s("p",[t._v("此种异常时因为一个事务读取了另一个事务"),s("strong",[t._v("修改了但是未提交的数据")])]),t._v(" "),s("p",[t._v("可以在READ-COMMITTED事务隔离级别以上可以避免")]),t._v(" "),s("h3",{attrs:{id:"不可重复读-not-repeatable-read"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不可重复读-not-repeatable-read"}},[t._v("#")]),t._v(" 不可重复读（Not Repeatable Read）")]),t._v(" "),s("p",[t._v("此种异常是一个事务对同一行数据执行了两次或更多次查询（"),s("strong",[t._v("update和delete")]),t._v("），但是却得到了不同的结果，也就是在一个事务里面你不能重复（即多次）读取一行数据，如果你这么做了，"),s("strong",[t._v("不能保证每次读取的结果是一样的")]),t._v("，有可能一样有可能不一样。因为在两次查询之间有别的事务对该行数据做了更新操作")]),t._v(" "),s("p",[s("strong",[t._v("Repeatable Read隔离级别可以避免")])]),t._v(" "),s("h3",{attrs:{id:"幻读-phantom-read"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#幻读-phantom-read"}},[t._v("#")]),t._v(" 幻读（Phantom Read）")]),t._v(" "),s("p",[t._v("幻读和不可重复读有点类似，只是针对的不是数据字段的值而是数据的条数（"),s("strong",[t._v("insert")]),t._v("）。此种异常是一个事务在两次查询的过程中数据的数量不同，让人以为发生幻觉，幻读大概就是这么得来的吧。举个例子，事务一查询order表有多少条记录，事务二新增了一条记录，然后事务一查了一下order表有多少记录，发现和第一次不一样，这就是幻读")]),t._v(" "),s("p",[s("strong",[t._v("Serializable隔离级别可以避免")])]),t._v(" "),s("h2",{attrs:{id:"解决矛盾-隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决矛盾-隔离级别"}},[t._v("#")]),t._v(" 解决矛盾 - 隔离级别")]),t._v(" "),s("p",[t._v("为了权衡『隔离』和『并发』的矛盾，ISO定义了4个事务隔离级别，每个级别隔离程度不同，允许出现的副作用也不同")]),t._v(" "),s("h2",{attrs:{id:"隔离级别对各异常的控制能力"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隔离级别对各异常的控制能力"}},[t._v("#")]),t._v(" 隔离级别对各异常的控制能力")]),t._v(" "),s("p",[t._v("Y-会发生该异常，N-可以避免该异常")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("级别\\异常")]),t._v(" "),s("th",[t._v("第一类更新丢失")]),t._v(" "),s("th",[t._v("脏读")]),t._v(" "),s("th",[t._v("不可重复读")]),t._v(" "),s("th",[t._v("第二类丢失更新")]),t._v(" "),s("th",[t._v("幻读")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("读未提交")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("Y")])]),t._v(" "),s("tr",[s("td",[t._v("读已提交")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("Y")]),t._v(" "),s("td",[t._v("Y")])]),t._v(" "),s("tr",[s("td",[t._v("可重复读")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("Y")])]),t._v(" "),s("tr",[s("td",[t._v("串行化")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("N")]),t._v(" "),s("td",[t._v("N")])])])]),t._v(" "),s("h3",{attrs:{id:"读未提交-read-uncommitted"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读未提交-read-uncommitted"}},[t._v("#")]),t._v(" 读未提交（Read Uncommitted）")]),t._v(" "),s("p",[t._v("即使一个事务的更新语句没有提交,但是别的事务可以读到这个改变")]),t._v(" "),s("blockquote",[s("p",[t._v("几种异常情况都可能出现。极易出错，没有安全性可言，基本不会使用")])]),t._v(" "),s("h3",{attrs:{id:"读已提交-read-committed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读已提交-read-committed"}},[t._v("#")]),t._v(" 读已提交（Read Committed）")]),t._v(" "),s("p",[s("strong",[t._v("一个事务只能看到其他事务的已经提交的更新")]),t._v("，看不到未提交的更新")]),t._v(" "),s("blockquote",[s("p",[t._v("消除了脏读和第一类丢失更新，这是大多数数据库的默认隔离级别，如Oracle,Sqlserver")])]),t._v(" "),s("h3",{attrs:{id:"可重复读-repeatable-read"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可重复读-repeatable-read"}},[t._v("#")]),t._v(" 可重复读（Repeatable Read）")]),t._v(" "),s("p",[t._v("一个事务中进行两次或"),s("strong",[t._v("多次")]),t._v("同样的对于数据内容的"),s("strong",[t._v("查询")]),t._v("，得到的"),s("strong",[t._v("结果")]),t._v("是"),s("strong",[t._v("一样")]),t._v("的")]),t._v(" "),s("p",[t._v("但不保证对于数据"),s("strong",[t._v("条数")]),t._v("的查询是一样的，只要存在读改行数据就禁止写")]),t._v(" "),s("blockquote",[s("p",[t._v("消除了不可重复读和第二类更新丢失，这是Mysql数据库的默认隔离级别")]),t._v(" "),s("p",[s("strong",[t._v("事务之间update操作不透明，但可以看到insert和delete对数据条数的改变")])])]),t._v(" "),s("blockquote",[s("p",[t._v("MySQL的innodb可以在Repeatable Read的隔离级别下避免幻读")]),t._v(" "),s("blockquote",[s("p",[t._v("当前读与快照读")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当前读：加锁的select和增删改")])]),t._v(" "),s("li",[s("p",[t._v("快照读：不加锁的非阻塞读：select")]),t._v(" "),s("p",[t._v("可能读到的数据不是数据的最新版本")])])])])]),t._v(" "),s("h3",{attrs:{id:"串行化-serializable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#串行化-serializable"}},[t._v("#")]),t._v(" 串行化（Serializable）")]),t._v(" "),s("p",[t._v("这个事务执行的时候不允许别的事务并发执行，完全串行化的读，只要存在读就禁止写,但可以同时读，消除了幻读")]),t._v(" "),s("blockquote",[s("p",[t._v("这是事务隔离的最高级别，虽然最安全最省心，但是效率太低，一般不会用")])]),t._v(" "),s("h1",{attrs:{id:"事务设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务设置"}},[t._v("#")]),t._v(" 事务设置")]),t._v(" "),s("h2",{attrs:{id:"mysql设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql设置"}},[t._v("#")]),t._v(" MySQL设置")]),t._v(" "),s("p",[t._v("默认情况下,MySQL启用自动提交模式（变量autocommit为ON）")]),t._v(" "),s("p",[t._v("在命令行执行sql语句的时候，每执行一行语句并执行实质上后面接了一句commit，就是完成了一次事务")]),t._v(" "),s("h3",{attrs:{id:"关闭自动提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭自动提交"}},[t._v("#")]),t._v(" 关闭自动提交")]),t._v(" "),s("p",[t._v("修改当前实例事务提交设置 "),s("code",[t._v("set global autocommit=0;")])]),t._v(" "),s("p",[t._v("修改配置文件 "),s("code",[t._v("autocommit=0")])]),t._v(" "),s("h3",{attrs:{id:"使用显式事务提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用显式事务提交"}},[t._v("#")]),t._v(" 使用显式事务提交")]),t._v(" "),s("p",[t._v("在"),s("strong",[t._v("关闭自动提交模式（关闭隐式提交）的情况")]),t._v("下，开启一个事务上下文。首先数据库会隐式提交之前的还未被提交的操作，同时开启一个新事务。")]),t._v(" "),s("p",[t._v("使用start transaction或begin开启一个事务")]),t._v(" "),s("h3",{attrs:{id:"设置事务隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置事务隔离级别"}},[t._v("#")]),t._v(" 设置事务隔离级别")]),t._v(" "),s("p",[t._v("当前实例/session配置")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SESSION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GLOBAL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNCOMMITTED")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMITTED")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPEATABLE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SERIALIZABLE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("mysql配置")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("– READ-UNCOMMITTED\n– READ-COMMITTED\n– REPEATABLE-READ\n– SERIALIZABLE\n\n[mysqld]\ntransaction-isolation = READ-COMMITTED\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("查询事务隔离级别")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@global.tx_isolation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@session.tx_isolation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@tx_isolation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"事务控制语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务控制语句"}},[t._v("#")]),t._v(" 事务控制语句")]),t._v(" "),s("p",[t._v("事务开始 "),s("code",[t._v("begin或start transaction")])]),t._v(" "),s("p",[t._v("事务提交 "),s("code",[t._v("commit或commit work")])]),t._v(" "),s("p",[t._v("回滚 "),s("code",[t._v("rollback或rollback work")])]),t._v(" "),s("p",[t._v("保存点设置 "),s("code",[t._v("savepoint point1")])]),t._v(" "),s("p",[t._v("回滚到保存点 "),s("code",[t._v("rollback to savepoint point1")])]),t._v(" "),s("p",[t._v("删除保存点 "),s("code",[t._v("release savepoint point1")])])])}),[],!1,null,null,null);a.default=_.exports}}]);