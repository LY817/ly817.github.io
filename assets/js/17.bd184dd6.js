(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{575:function(a,t,e){a.exports=e.p+"assets/img/8458706-df1cd20c56e7ca51.9ab707b6.png"},576:function(a,t,e){a.exports=e.p+"assets/img/image-20191121125107737.ea3753a7.png"},577:function(a,t,e){a.exports=e.p+"assets/img/1574346515486.7a9e0afc.png"},578:function(a,t,e){a.exports=e.p+"assets/img/1158841-20190704115343832-1380910507.01e87911.png"},651:function(a,t,e){"use strict";e.r(t);var s=e(21),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[s("img",{attrs:{src:e(575),alt:"img"}})]),a._v(" "),s("h2",{attrs:{id:"缓存设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存设计"}},[a._v("#")]),a._v(" 缓存设计")]),a._v(" "),s("p",[a._v("Eureka 的数据存储分了两层：数据存储层和缓存层")]),a._v(" "),s("h3",{attrs:{id:"数据存储层-服务注册表-registry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据存储层-服务注册表-registry"}},[a._v("#")]),a._v(" 数据存储层 - 服务注册表 - registry")]),a._v(" "),s("p",[a._v("对注册服务的维护在"),s("code",[a._v("com.netflix.eureka.registry.AbstractInstanceRegistry")]),a._v("中实现")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConcurrentHashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Lease")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InstanceInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" registry\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConcurrentHasdhMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Lease")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InstanceInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("registry由两层ConcurrentHashMap组成")]),a._v(" "),s("ul",[s("li",[a._v("第一层\n"),s("ul",[s("li",[a._v("key：注册的eureka客户端中"),s("code",[a._v("spring.application.name")]),a._v("配置的服务名")]),a._v(" "),s("li",[a._v("value：指向第二层ConcurrentHashMap的引用，表示key服务名对应的注册服务实例信息集合")])])]),a._v(" "),s("li",[a._v("第二层\n"),s("ul",[s("li",[a._v("key：注册的服务实例的InstanceId")]),a._v(" "),s("li",[a._v("value：Lease对象 包含了服务详情和服务治理相关的属性")])])])]),a._v(" "),s("h3",{attrs:{id:"二级缓存层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二级缓存层"}},[a._v("#")]),a._v(" 二级缓存层")]),a._v(" "),s("p",[a._v("通过 Eureka Server 的二层缓存机制，可以非常有效地提升 Eureka Server 的响应时间，通过数据存储层和缓存层的数据切割，根据使用场景来提供不同的数据支持。")]),a._v(" "),s("p",[a._v("在"),s("strong",[a._v("ResponseCacheImpl")]),a._v("中实现")]),a._v(" "),s("blockquote",[s("p",[s("code",[a._v("com.netflix.eureka.registry.ResponseCacheImpl")]),a._v("中实现")]),a._v(" "),s("p",[s("code",[a._v("com.netflix.eureka.registry.AbstractInstanceRegistry")]),a._v("中调用initializedResponseCache()实现")])]),a._v(" "),s("h4",{attrs:{id:"第一级缓存-readonlycachemap-外部读取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一级缓存-readonlycachemap-外部读取"}},[a._v("#")]),a._v(" 第一级缓存 - readOnlyCacheMap - 外部读取")]),a._v(" "),s("blockquote",[s("p",[a._v("为了供客户端获取注册信息时使用，供对外暴露的getRegistry接口读取")])]),a._v(" "),s("p",[a._v("ResponseCacheImpl中的"),s("code",[a._v("ConcurrentHashMap<Key,Value> readOnlyCacheMap")]),a._v("属性")]),a._v(" "),s("p",[a._v("本质上是 ConcurrentHashMap，无过期时间，保存服务信息的对外输出数据结构（Value，区别于registry中的Lease对象）")]),a._v(" "),s("h5",{attrs:{id:"更新机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新机制"}},[a._v("#")]),a._v(" 更新机制")]),a._v(" "),s("p",[a._v("TimerTask定时从二级缓存拉取注册信息")]),a._v(" "),s("h4",{attrs:{id:"第二级缓存-readwritecachemap-中间缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二级缓存-readwritecachemap-中间缓存"}},[a._v("#")]),a._v(" 第二级缓存 - readWriteCacheMap - 中间缓存")]),a._v(" "),s("blockquote",[s("p",[a._v("为了"),s("strong",[a._v("降低注册表registry读写锁竞争")]),a._v("，降低读取频率")])]),a._v(" "),s("p",[a._v("Loading<Key,Value> readWriteCacheMap")]),a._v(" "),s("p",[a._v("本质上是 guava 的缓存，包含定时失效机制，保存服务信息的"),s("strong",[a._v("对外输出")]),a._v("数据结构（Value）")]),a._v(" "),s("h5",{attrs:{id:"过期机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过期机制"}},[a._v("#")]),a._v(" 过期机制")]),a._v(" "),s("ul",[s("li",[a._v("接收到Eureka Client 发送的 register、renew 和 cancel 请求并更新 registry 注册表之后，使二级缓存失效"),s("code",[a._v("invalidate(Key... keys)")]),a._v("；")]),a._v(" "),s("li",[a._v("Eureka Server 自身的 Evict Task 剔除服务后，删除二级缓存；")]),a._v(" "),s("li",[a._v("二级缓存本身设置了 guava 的失效机制，隔一段时间后自己自动失效；")])]),a._v(" "),s("h5",{attrs:{id:"更新机制-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新机制-2"}},[a._v("#")]),a._v(" 更新机制")]),a._v(" "),s("ul",[s("li",[a._v("Eureka Client 获取全量或者增量的数据时，会先从一级缓存中获取；如果一级缓存中不存在，再从二级缓存中获取；如果二级缓存也不存在，这时候先将registry的数据同步到二级缓存中，再从缓存中获取")]),a._v(" "),s("li",[a._v("定时更新一级缓存的时候，会读取二级缓存，如果二级缓存没有数据，也会触发load，拉取registry的注册数据")])]),a._v(" "),s("h3",{attrs:{id:"相关实现类关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关实现类关系"}},[a._v("#")]),a._v(" 相关实现类关系")]),a._v(" "),s("p",[s("img",{attrs:{src:e(576),alt:"image-20191121125107737"}})]),a._v(" "),s("h2",{attrs:{id:"数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[a._v("#")]),a._v(" 数据结构")]),a._v(" "),s("h3",{attrs:{id:"服务注册表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务注册表"}},[a._v("#")]),a._v(" 服务注册表")]),a._v(" "),s("p",[s("code",[a._v("ConcurrentHashMap<String, Map<String, Lease<InstanceInfo>>>")])]),a._v(" "),s("h4",{attrs:{id:"lease"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lease"}},[a._v("#")]),a._v(" Lease")]),a._v(" "),s("h4",{attrs:{id:"instanceinfo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instanceinfo"}},[a._v("#")]),a._v(" InstanceInfo")]),a._v(" "),s("h3",{attrs:{id:"缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[a._v("#")]),a._v(" 缓存")]),a._v(" "),s("p",[s("code",[a._v("ConcurrentHashMap<Key,Value>")])]),a._v(" "),s("p",[s("code",[a._v("Loading<Key,Value>")])]),a._v(" "),s("h4",{attrs:{id:"value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#value"}},[a._v("#")]),a._v(" Value")]),a._v(" "),s("h2",{attrs:{id:"数据交互"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据交互"}},[a._v("#")]),a._v(" 数据交互")]),a._v(" "),s("p",[s("img",{attrs:{src:e(577),alt:"img"}})]),a._v(" "),s("p",[s("img",{attrs:{src:e(578),alt:"img"}})]),a._v(" "),s("blockquote",[s("p",[a._v("维护服务列表")]),a._v(" "),s("p",[a._v("LeaseManager接口主要是维护可用服务清单的，它将服务的可能期限抽象为租约期限，该接口负责为一个实例的租约的创建、续约、和下线")])]),a._v(" "),s("h3",{attrs:{id:"eureka-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eureka-server"}},[a._v("#")]),a._v(" Eureka Server")]),a._v(" "),s("h4",{attrs:{id:"对外暴露服务http接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对外暴露服务http接口"}},[a._v("#")]),a._v(" 对外暴露服务http接口")]),a._v(" "),s("p",[a._v("Eureka注册中心是Servlet应用")]),a._v(" "),s("p",[a._v("使用Jersey框架（@POST/@Consumers）对外提供RESTful HTTP接口")]),a._v(" "),s("ul",[s("li",[a._v("接收Eureka客户端请求，维护服务注册表数据（增删改）")]),a._v(" "),s("li",[a._v("提供获取最新服务注册表的接口（查询）")]),a._v(" "),s("li",[a._v("提供前端可视化界面服务（展示）")])]),a._v(" "),s("h4",{attrs:{id:"维护服务注册表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#维护服务注册表"}},[a._v("#")]),a._v(" 维护服务注册表")]),a._v(" "),s("p",[a._v("根据Eureka Client请求维护注册表")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("leaseManager接口")]),a._v("定义了应用实例在服务中的以下核心操作\n"),s("strong",[a._v("服务注册register")]),a._v(" ，"),s("strong",[a._v("服务下线cancel")]),a._v("，"),s("strong",[a._v("服务租约renew")]),a._v("和心跳操作一起保持租约，"),s("strong",[a._v("服务剔除evict")])])]),a._v(" "),s("h4",{attrs:{id:"peer之间注册表数据同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#peer之间注册表数据同步"}},[a._v("#")]),a._v(" Peer之间注册表数据同步")]),a._v(" "),s("p",[a._v("集群部署的注册中心，节点角色对等，互相作为对方的客户端。当其中一个节点进行了注册表变更后，会通知其他的server节点")]),a._v(" "),s("blockquote",[s("p",[a._v("InstanceRegistry类继承了 "),s("strong",[a._v("PeerAwareInstanceRegistryImp")]),a._v("l类")]),a._v(" "),s("p",[a._v("在服务注册、续约、下线等操作完成后，会去调用PeerAwareInstanceRegistryImpl的相关逻辑。而PeerAwareInstanceRegistryImpl中主要是添加了一个广播的功能，拥有了将服务实例的注册、续约、下线等操作同步到其它Eureka Server的能力。")])]),a._v(" "),s("h3",{attrs:{id:"eureka-client"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eureka-client"}},[a._v("#")]),a._v(" Eureka Client")]),a._v(" "),s("h4",{attrs:{id:"维护服务注册表-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#维护服务注册表-2"}},[a._v("#")]),a._v(" 维护服务注册表")]),a._v(" "),s("p",[a._v("封装与Eureka Server交互，更新本地的服务注册表以及更新注册中心自己的状态")]),a._v(" "),s("h4",{attrs:{id:"服务名解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务名解析"}},[a._v("#")]),a._v(" 服务名解析")]),a._v(" "),s("p",[a._v("为Fegin和Ribbon提供服务名解析接口，通过微服务名称获取实例的实际访问地址集合，供Ribbon负载均衡获取实际访问地址")])])}),[],!1,null,null,null);t.default=r.exports}}]);