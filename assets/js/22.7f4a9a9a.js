(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{572:function(t,a,s){t.exports=s.p+"assets/img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b3l1MDgxNw==,size_16,color_FFFFFF,t_70-20200513123037882.57996028.png"},573:function(t,a,s){t.exports=s.p+"assets/img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b3l1MDgxNw==,size_16,color_FFFFFF,t_70.0fe92d13.png"},574:function(t,a,s){t.exports=s.p+"assets/img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b3l1MDgxNw==,size_16,color_FFFFFF,t_70-20200513123037608.a34c92cd.png"},649:function(t,a,s){"use strict";s.r(a);var n=s(21),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),n("p",[t._v("依赖自动发现机制是为了提高程序的扩展性，降低代码的耦合度。在不对核心代码做修改和配置的前提下，只需在classpath下添加依赖，就能将插件接入到系统中。")]),t._v(" "),n("blockquote",[n("p",[t._v("遵循的基本原则")]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("面向接口编程")])]),t._v(" "),n("p",[t._v("核心代码面向接口编程")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("约定大于配置")])]),t._v(" "),n("p",[t._v("根据约定目录下的配置，读取并加载接口实现类")])])])]),t._v(" "),n("h1",{attrs:{id:"jdk自带的spi"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdk自带的spi"}},[t._v("#")]),t._v(" JDK自带的SPI")]),t._v(" "),n("p",[t._v("SPI 全称为 ("),n("strong",[t._v("Service Provider Interface")]),t._v(") ,是JDK内置的一种服务提供发现机制（动态替换接口实现)")]),t._v(" "),n("blockquote",[n("p",[t._v("java spi的具体约定为:当服务的提供者，提供了服务接口的一种实现之后，在jar包的META-INF/services/目录里同时创建一个以服务接口命名的文件。该文件里就是实现该服务接口的具体实现类。而当外部程序装配这个模块的时候，就能通过该jar包META-INF/services/里的配置文件找到具体的实现类名，并装载实例化，完成模块的注入。 基于这样一个约定就能很好的找到服务接口的实现类，而不需要再代码里制定。jdk提供服务实现查找的一个工具类：java.util.ServiceLoader")])]),t._v(" "),n("p",[t._v("通常用来为框架提供扩展性、兼容性和第三方插件接口：最常见的就是JDBC驱动，不同的数据厂家对应不同的驱动")]),t._v(" "),n("p",[t._v("例如，  有个接口，想运行时动态的给它添加实现，你只需要添加一个实现的依赖包到classpath，在这个依赖包工程中，通过一个文件"),n("strong",[t._v("声明")]),t._v("实现类与SPI的对应关系")]),t._v(" "),n("blockquote",[n("p",[t._v("在classpath下的"),n("code",[t._v("MATE-INF/services")]),t._v("目录下创建一个文件，文件名为JDK的SPI全路径名，文件内容为当前依赖包中的该SPI的实现类（可以有多个，用逗号隔开）。文件编码必须是UTF-8")])]),t._v(" "),n("p",[t._v("当JVM启动时，会扫描classpath "),n("code",[t._v("MATE-INF/services")]),t._v("目录下所有的文件，得到SPI与实现类的映射关系")]),t._v(" "),n("p",[t._v("通过ServiceLoader来加载SPI对应的实现类")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServiceLoader")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloInterface")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" loaders "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServiceLoader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloInterface")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloInterface")]),t._v(" hello "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" loaders"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    hello"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("h1",{attrs:{id:"dubbo实现的spi"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dubbo实现的spi"}},[t._v("#")]),t._v(" Dubbo实现的SPI")]),t._v(" "),n("p",[t._v("Dubbo的扩展机制是基于SPI思想来实现的，但是并没有采用JDK中原生的SPI机制，因为JDK中SPI具有很大的缺点：")]),t._v(" "),n("p",[t._v("JDK中标准的SPI会"),n("strong",[t._v("一次性实例化扩展点所有的实现类")]),t._v("，不管这些实例化出来的扩展点实现有没有被用到。有的扩展点实现初始化时非常的耗时，即使没有用到也会被加载，这样就很浪费资源")]),t._v(" "),n("h2",{attrs:{id:"dubbo中的spi概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dubbo中的spi概述"}},[t._v("#")]),t._v(" Dubbo中的SPI概述")]),t._v(" "),n("p",[t._v("Dubbo的SPI机制中增加了对扩展点IOC和AOP的支持，一个扩展点可以直接setter注入到其他的扩展点中")]),t._v(" "),n("p",[t._v("弥补了上述JDK中SPI的缺点，"),n("strong",[t._v("结合Spring的设计思想，细粒度的控制扩展实现类的实例化")])]),t._v(" "),n("h3",{attrs:{id:"spi在dubbo中的用处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spi在dubbo中的用处"}},[t._v("#")]),t._v(" SPI在dubbo中的用处")]),t._v(" "),n("p",[t._v("Dubbo作为灵活的框架，并不会强制所有用户都一定使用Dubbo提供的某些架构，"),n("strong",[t._v("提供用户自定义插件的接入")])]),t._v(" "),n("blockquote",[n("p",[t._v("例如注册中心（Registry），Dubbo提供了zk和redis，但是如果我们更倾向于其他的注册中心的话，我们"),n("strong",[t._v("可以替换掉Dubbo提供的注册中心")]),t._v("，可以写一个类似eureka server的注册中心，替换默认的zk")]),t._v(" "),n("p",[t._v("切换zk和redis，只用在应用层使用dubbo提供的api进行配置；如果想要使用其他的注册中心实现，可以利用dubbo的SPI机制，添加自定义的注册中心实现依赖")])]),t._v(" "),n("p",[t._v("针对这种可被替换的技术实现点我们称之为"),n("strong",[t._v("扩展点")]),t._v("，类似的扩展点还有很多，例如Protocol，Filter，Loadbalance等等")]),t._v(" "),n("h3",{attrs:{id:"微内核"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微内核"}},[t._v("#")]),t._v(" 微内核")]),t._v(" "),n("p",[t._v("微内核架构 （Microkernel architecture） 模式也被称为"),n("strong",[t._v("插件架构")]),t._v(" （Plugin architecture） 模式")]),t._v(" "),n("blockquote",[n("p",[t._v("原本与内核集成在一起的组件会被分离出来，内核提供了特定的接口使得这些组件可以灵活的接入，这些组件在内核的管理下工作，但是这些组件可以独立的发展、更改（不会对现有系统造成改动），只要符合内核的接口即可。典型的例子比如,Eclipse,IDEA")])]),t._v(" "),n("p",[t._v("Dubbo内核对外暴露出扩展点，通过扩展点可以实现定制的符合自己业务需求的功能")]),t._v(" "),n("p",[t._v("Dubbo内核"),n("strong",[t._v("通过ExtensionLoader扩展点加载器")]),t._v("来加载各个SPI扩展点。Dubbo内核对扩展是无感的 ，完全不知道扩展的存在 ，内核代码中不会出现使用具体扩展的硬编码")]),t._v(" "),n("p",[n("img",{attrs:{src:s(572),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"术语"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#术语"}},[t._v("#")]),t._v(" 术语")]),t._v(" "),n("h4",{attrs:{id:"扩展点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展点"}},[t._v("#")]),t._v(" 扩展点")]),t._v(" "),n("p",[t._v("dubbo中被"),n("code",[t._v("@SPI")]),t._v("注解的接口被称为扩展点")]),t._v(" "),n("h4",{attrs:{id:"扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[t._v("#")]),t._v(" 扩展")]),t._v(" "),n("p",[t._v("被 @SPI 注解的 Interface 的实现称为这个扩展点的一个扩展")]),t._v(" "),n("h2",{attrs:{id:"实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),n("p",[t._v("以rpc模块为例")]),t._v(" "),n("h3",{attrs:{id:"规约"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#规约"}},[t._v("#")]),t._v(" 规约")]),t._v(" "),n("h4",{attrs:{id:"扩展点约定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展点约定"}},[t._v("#")]),t._v(" 扩展点约定")]),t._v(" "),n("p",[t._v("扩展点必须是 Interface 类型 ，必须被 "),n("code",[t._v("@SPI")]),t._v(" 注解 ，满足这两点才是一个扩展点")]),t._v(" "),n("h4",{attrs:{id:"扩展定义约定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展定义约定"}},[t._v("#")]),t._v(" 扩展定义约定")]),t._v(" "),n("p",[t._v("dubbo会读取classpath下，下列三个目录下的配置文件，读取接口的实现类路径")]),t._v(" "),n("p",[t._v("这些路径下定义的文件名称为 "),n("code",[t._v("$扩展点接口的全类名")]),t._v("（当前项目中定义的SPI接口-被"),n("code",[t._v("@SPI")]),t._v("标记）")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("META-INF/services/$扩展点接口的全类名")]),t._v("（兼容Java自带的SPI）")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("META-INF/dubbo/$扩展点接口的全类名")]),t._v("（建议的外部SPI配置存放路径）")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("META-INF/dubbo/internal/$扩展点接口的全类名")]),t._v("（dubbo内部实现）")])])]),t._v(" "),n("p",[n("img",{attrs:{src:s(573),alt:""}})]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("apache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dubbo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rpc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("apache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dubbo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("common"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("URL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("apache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dubbo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("common"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("extension"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Adaptive")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("apache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dubbo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("common"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("extension"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("SPI"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Protocol. (API/SPI, Singleton, ThreadSafe)\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SPI")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dubbo"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Protocol")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDefaultPort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Adaptive")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exporter")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("export")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Invoker")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" invoker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RpcException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Adaptive")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Invoker")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("refer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),t._v(" url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RpcException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("destroy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br")])]),n("p",[t._v("文件内容是以"),n("strong",[t._v("键值对")]),t._v("的方式配置扩展点的扩展实现:")]),t._v(" "),n("div",{staticClass:"language-properties line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("echo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.EchoFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("generic")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.GenericFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("genericimpl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.GenericImplFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("token")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.TokenFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("accesslog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.AccessLogFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("activelimit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.ActiveLimitFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("classloader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.ClassLoaderFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("context")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.ContextFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("consumercontext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.ConsumerContextFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("exception")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.ExceptionFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("executelimit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.ExecuteLimitFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("deprecated")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.DeprecatedFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("compatible")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.CompatibleFilter")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("timeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.dubbo.rpc.filter.TimeoutFilter")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])]),n("p",[n("strong",[t._v("默认适应扩展")])]),t._v(" "),n("p",[t._v('Protocol SPI被标记了@SPI("dubbo")，表示Protocol的实现类默认使用DubboProtocol')]),t._v(" "),n("p",[t._v("其实dubbo和实现类DubboProtocol关系类似Spring配置文件中的id和class的关系，不同的是Dubbo的关系是配置在目录"),n("code",[t._v("/META_INF/dubbo/internal/com.alibaba.dubbo.rpc.Protocol")]),t._v("文件中，文件内容为：")]),t._v(" "),n("div",{staticClass:"language-properties line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("dubbo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("com.alibaba.dubbo.rpc.protocol.http.HttpProtocol")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("hessian")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("com.alibaba.dubbo.rpc.protocol.hessian.HessianProtocol")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("实现机制就类似Spring的bean注入，通过key(dubbo、http、hessian)来找到其实现类")]),t._v(" "),n("h3",{attrs:{id:"扩展加载器-extensionloader-t"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展加载器-extensionloader-t"}},[t._v("#")]),t._v(" 扩展加载器 "),n("code",[t._v("ExtensionLoader<T>")])]),t._v(" "),n("p",[t._v("扩展加载器控制着 dubbo 内部所有扩展点的初始化、加载扩展的过程")]),t._v(" "),n("p",[t._v("ExtensionLoader 中会维护两个静态ConcurrentMap变量 作为缓存 ：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("EXTENSION_LOADERS")]),t._v(" "),n("p",[t._v("保存了内核开放的SPI扩展点对应的 ExtensionLoader实例对象 （一种扩展点有一个对应的 ExtensionLoader 对象）")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("key")]),t._v("      SPI接口的Class对象")]),t._v(" "),n("li",[n("code",[t._v("value")]),t._v("  对应的ExtensionLoader")])])]),t._v(" "),n("li",[n("p",[t._v("EXTENSION_INSTANCES")]),t._v(" "),n("p",[t._v("保存了扩展类型 （Class） 和扩展类型的实例对象")]),t._v(" "),n("p",[t._v("是一对一而不是Java自带SPI机制的一对多")]),t._v(" "),n("p",[t._v("根据SPI注解的默认设置或者用户配置，最终加载一个SPI扩展实现")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("key")]),t._v("      SPI接口的Class对象")]),t._v(" "),n("li",[n("code",[t._v("value")]),t._v("  SPI扩展实现")])])])]),t._v(" "),n("h4",{attrs:{id:"api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),n("h5",{attrs:{id:"static-getextensionloader-spiclass"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#static-getextensionloader-spiclass"}},[t._v("#")]),t._v(" "),n("code",[t._v("static getExtensionLoader(SPIClass)")])]),t._v(" "),n("p",[t._v("ExtensionLoader通过"),n("code",[t._v("getExtensionLoader(Class<T> SPIClass)")]),t._v("静态方法暴露获取SPI实现类的API")]),t._v(" "),n("p",[t._v("以懒加载的模式获取SPIClass对应的ExtensionLoader实例")]),t._v(" "),n("h5",{attrs:{id:"hasextension-spiname"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hasextension-spiname"}},[t._v("#")]),t._v(" "),n("code",[t._v("hasExtension(SPIName)")])]),t._v(" "),n("p",[t._v("获取SPI扩展点前，检查classpath下是否有对应的实例")]),t._v(" "),n("h5",{attrs:{id:"getextension-spiname"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getextension-spiname"}},[t._v("#")]),t._v(" "),n("code",[t._v("getExtension(SPIName)")])]),t._v(" "),n("p",[t._v("获取SPI扩展点实例")]),t._v(" "),n("p",[n("img",{attrs:{src:s(574),alt:""}})]),t._v(" "),n("h1",{attrs:{id:"springboot的组件自动装配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot的组件自动装配"}},[t._v("#")]),t._v(" SpringBoot的组件自动装配")]),t._v(" "),n("h3",{attrs:{id:"spring-boot-starter-xxx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-starter-xxx"}},[t._v("#")]),t._v(" "),n("code",[t._v("spring-boot-starter-XXX")])]),t._v(" "),n("p",[t._v("在使用SpringBoot构建项目时，当需要某个领域的功能时（例如web服务、数据访问等），只需要在classpath下添加（pom配置文件配置）相应的spring-boot-starter-xxx依赖，然后在启动类添加开启对应的组件功能的注解（"),n("code",[t._v("@EnableXxx")]),t._v("和"),n("code",[t._v("XxxAutoCinfiguration")]),t._v("），就可以将组件接入到SpringBoot中")]),t._v(" "),n("p",[t._v("SpringCloud就是利用这种机制，在SpringBoot的基础上开发的微服务工具集")]),t._v(" "),n("h2",{attrs:{id:"实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),n("p",[n("code",[t._v("spring-boot-starter-XXX")]),t._v("中没有任何业务实现，作为"),n("strong",[t._v("桥接器")]),t._v("，将组件功能接入到SpringBoot中(被封装成bean注入到容器中)")]),t._v(" "),n("blockquote",[n("p",[t._v("SpringBoot与前两种SPI模式模式的不同在于不是简单的面向接口，而是面向Spring上下文（通过bean注入和取用的方式来调用组件功能），耦合度更低")])]),t._v(" "),n("h3",{attrs:{id:"桥接逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#桥接逻辑"}},[t._v("#")]),t._v(" 桥接逻辑")]),t._v(" "),n("h4",{attrs:{id:"配置依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置依赖"}},[t._v("#")]),t._v(" 配置依赖")]),t._v(" "),n("p",[t._v("配置"),n("code",[t._v("spring-boot-starter-XXX")]),t._v("的pom文件，添加这个组件具体实现的依赖，以及AutoConfiguration的相关依赖")]),t._v(" "),n("h4",{attrs:{id:"定义桥接逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义桥接逻辑"}},[t._v("#")]),t._v(" 定义桥接逻辑")]),t._v(" "),n("h5",{attrs:{id:"xxxautoconfiguration-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#xxxautoconfiguration-1"}},[t._v("#")]),t._v(" XxxAutoConfiguration ①")]),t._v(" "),n("p",[t._v("由"),n("code",[t._v("@Configuration")]),t._v("标记")]),t._v(" "),n("p",[t._v("在配置类中完成："),n("strong",[t._v("加载配置")]),t._v("、环境检查、第三方功能入口bean")]),t._v(" "),n("h5",{attrs:{id:"xxxconfiguration-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#xxxconfiguration-2"}},[t._v("#")]),t._v(" XxxConfiguration ②")]),t._v(" "),n("p",[t._v("实现ApplicationContextAware")]),t._v(" "),n("p",[t._v("获取操作上下文能力")]),t._v(" "),n("h3",{attrs:{id:"组件注册"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件注册"}},[t._v("#")]),t._v(" 组件注册")]),t._v(" "),n("p",[t._v("通过元数据的配置("),n("code",[t._v("/MATE-INF/spring.factories")]),t._v("或注解)的方式来注册组件")]),t._v(" "),n("h4",{attrs:{id:"配置spring-factories-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置spring-factories-1"}},[t._v("#")]),t._v(" 配置"),n("code",[t._v("spring.factories")]),t._v(" ①")]),t._v(" "),n("p",[t._v("在starter组件工程的classpath下创建"),n("code",[t._v("/MATE-INF/spring.factories")]),t._v("，在这个文件中配置自定义的AutoConfiguration类")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("# "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Auto")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Configure")]),t._v("\norg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("boot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("autoconfigure"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnableAutoConfiguration")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xxx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XXXAutoConfiguration")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("h4",{attrs:{id:"添加-enablexxx-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加-enablexxx-2"}},[t._v("#")]),t._v(" 添加@EnableXxx ②")]),t._v(" "),n("p",[t._v("在"),n("code",[t._v("spring-boot-starter-XXX")]),t._v("中定义，通过"),n("code",[t._v("@Import")]),t._v("指定对应的"),n("strong",[t._v("Configuration")]),t._v("类（与AutoConfiguration实现不同，Configuration是实现ApplicationContextAware来获取"),n("strong",[t._v("对上下文applicationContext的操作能力")]),t._v("）")]),t._v(" "),n("p",[t._v("所以这个模式的操作空间更多")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RUNTIME"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TYPE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Import")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DelegatingWebMvcConfiguration")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnableWebMvc")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("h3",{attrs:{id:"加载接入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加载接入"}},[t._v("#")]),t._v(" 加载接入")]),t._v(" "),n("p",[t._v("在SpringBoot应用启动时，"),n("strong",[t._v("spring boot会遍历在各个jar包种META-INF目录下的spring.factories文件，构建成一个配置类链表")]),t._v("（按@AutoConfigureAfter的顺序）,然后按顺序执行配置类，将符合条件的bean注入到SpringBoot中的容器中")])])}),[],!1,null,null,null);a.default=e.exports}}]);